-- SQL Notes

---------- SELECT Statements & WHERE filtering
SELECT attribute-lists FROM table
    WHERE condition

-- attribute-lists can be * -> include all columns

-- Conditions include operations AND, OR, NOT, XOR, >, >=, <=, <=, =, <> (not equal), IN, BETWEEN, LIKE
-- Conditional statements work like binary classifiers -> WHERE only takes values where output is 1
SELECT population FROM bbc
    WHERE name = 'France'
    WHERE area < 2000
        AND gdp > 5000000000
    WHERE name IN ('Sri Lanka', 'Ceylon', 'Persia','Iran')
    WHERE name LIKE 'D%'
    WHERE area BETWEEN 207600 AND 244820 -- Between is inclusive
    WHERE population > 250000000 OR area > 3000000

-- Direct operation on columns
SELECT name, population/1000000 FROM world
    WHERE continent = 'South America'
    
-- Useful Functions:
ROUND(f,p) -- returns f rounded to p decimal places. If p < 0, round to 10^-p
LENGTH(s) -- returns the number of characters in string s
CONCAT(s1, s2 ...) -- allows you to stick two or more strings together

-- CASE WHEN Keyword:
-- CASE allows you to return different values under different conditions. If there no conditions match (and there is not ELSE) then NULL is returned.
CASE WHEN condition1 THEN value1 
       WHEN condition2 THEN value2  
       ELSE def_value 
  END 


-- Nested SELECTs -> output of one select used for WHERE filtering
-- often used for comparisons eg List each country name where the population is larger than that of 'Russia'.
-- If the inner SELECT may yield multiple results, use ALL or ANY 
SELECT name FROM world
    WHERE population > ALL(SELECT population FROM world WHERE name='Russia')

SELECT name, CONCAT(ROUND(population*100/(SELECT population FROM world WHERE name = 'Germany'),0), '%') FROM world
    WHERE continent = 'Europe'

-- Sorting Keywords - ORDER BY ___ ASC, ___DESC -> Decreasing priority
SELECT name, population
  FROM bbc
  WHERE population > 100000000
  ORDER BY population DESC
  
--------- Aggregate functions (Split-Apply-Combine)
-- Core Aggregate Functions - SUM, COUNT, MAX, AVG -> each may be applied to a numeric attribute resulting in a single row being returned by the query
SELECT SUM(population), SUM(gdp)
  FROM bbc
  WHERE region = 'Europe'

-- DISTINCT -> returns only unique values from the column -> series.unique()
SELECT DISTINCT region FROM bbc

SELECT COUNT(DISTINCT region) -- series.nuniques()

-- GROUP BY -> splits data into groups of items sharing values before applying aggregate and recombine into rows
SELECT continent, COUNT(name)
    FROM world
    GROUP BY continent
    
-- Multiple GROUP BY -> Multiindexing -> Similar to pivot table
-- Attribute lists must only contain columns used in GROUP BY and aggregate function
SELECT yr, subject FROM nobel
WHERE yr >= 2000
GROUP BY yr, subject
HAVING COUNT(winner) = 3

-- The HAVING clause allows use to filter the groups which are displayed. The WHERE clause filters rows before the aggregation, the HAVING clause filters after the aggregation
SELECT continent, SUM(population)
  FROM world
 WHERE gdp > 100000000
 GROUP BY continent
HAVING SUM(population)>500000000

---------- JOIN Operations on Relational Database tables
-- Given two tables, game and goal, where the 'id' column from game corresponds with 'matchid' column in goal, one can query from both tables together through JOIN/ON statements in FROM
-- If one table has two instances of one key, it's treated like a multiindex table
-- If in attribute list, no match is found between table 1 and 2, that row is omitted from the result table -> (use LEFT Join if want NULL results) 
-- i.e. prioritises no null values
SELECT matchid, player, teamid, stadium, mdate
    FROM game JOIN goal ON (game.id=goal.matchid)
    WHERE teamid = 'GER'
    
-- Multiple table JOINs
SELECT * FROM
   movie JOIN casting ON movie.id=movieid
         JOIN actor   ON actorid=actor.id
  WHERE actor.name='John Hurt'

-- LEFT JOIN Keyword -> returns all records from the left table (table1), and the matched records from the right table (table2). The result is NULL from the right side, if there is no match
-- i.e. LEFT table is more stubborn -> must preserve all values
SELECT mdate,
  team1,
  SUM(CASE WHEN teamid=team1 THEN 1 ELSE 0 END) AS score1,
  team2, 
  SUM(CASE WHEN teamid=team2 THEN 1 ELSE 0 END) AS score2
FROM game LEFT JOIN goal ON matchid = id
ORDER BY mdate, matchid, team1, team2

-- RIGHT JOIN is opposite

--------------- SELF JOINs
-- Useful when the table relates to itself in a certain manner
SELECT a.company, a.num, a.stop, b.stop
FROM route a JOIN route b ON
  (a.company=b.company AND a.num=b.num)
WHERE a.stop=53

SELECT DISTINCT a.company, a.num
FROM route a JOIN route b ON (a.company = b.company AND a.num = b.num)
JOIN stops stopa ON a.stop = stopa.id
JOIN stops stopb ON b.stop = stopb.id
WHERE stopa.name = 'Craiglockhart' and stopb.name = 'Tollcross'

-- Double self join on separate tables
SELECT  a.num, a.company, stopb.name, d.num, d.company
FROM 
(route a JOIN route b ON (a.company = b.company AND a.num = b.num AND a.stop = (SELECT id FROM stops WHERE name = 'Craiglockhart'))) 
JOIN (route c JOIN route d ON (c.company = d.company AND c.num = d.num AND d.stop = (SELECT id FROM stops WHERE name = 'Lochend'))) 
ON b.stop = c.stop
JOIN stops stopa ON a.stop = stopa.id
JOIN stops stopb ON b.stop = stopb.id
JOIN stops stopd ON d.stop = stopd.id
ORDER BY a.num ASC, stopb.name ASC, d.company ASC 